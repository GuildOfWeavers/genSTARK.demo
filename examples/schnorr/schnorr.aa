(module
    (field prime 26959946667150639794667015087019630673557916260026308143510066298881)
    (const $a scalar 26959946667150639794667015087019630673557916260026308143510066298878)

	(function $addPoints    # x = m^2 - xp - xq, y = m * (xp - x) - yp
        (result vector 2)
        (param $p vector 2) (param $q vector 2) (param $m scalar)
        (local $x scalar) (local $y scalar)
        (store.local $x
            (sub
                (exp (load.param $m) (scalar 2))
                (add (get (load.param $p) 0) (get (load.param $q) 0))))
        (store.local $y
            (sub 
                (mul
                    (load.param $m)
                    (sub (get (load.param $p) 0) (load.local $x)))
                (get (load.param $p) 1)))
        (vector (load.local $x) (load.local $y)))

    (function $computeM1  # m1 = (3 * px^2) / (2 * py)
        (result scalar)
        (param $p vector 2)
        (div
            (add
                (mul
                    (scalar 3)
                    (exp (get (load.param $p) 0) (scalar 2)))
                (load.const $a))
            (mul (scalar 2) (get (load.param $p) 1))))

    (function $computeQ
        (result vector 2)
        (param $p vector 2) (param $q vector 2) (param $m scalar) (param $k vector 2)
        (add
            (mul        # copy previous value
                (load.param $q)
                (sub (scalar 1) (get (load.param $k) 0)))
            (add
                (mul    # copy p value
                    (load.param $p)
                    (mul (get (load.param $k) 0) (get (load.param $k) 1)))
                    
                (mul    # compute p + q
                    (call $addPoints (load.param $p) (load.param $q) (load.param $m))
                    (mul (get (load.param $k) 0) (sub (scalar 1) (get (load.param $k) 1)))))))

    (function $initTrace
        (result vector 15)
        (param $g vector 2) (param $p vector 2) (param $r vector 2)
        (vector
            (load.param $g)
            (scalar 0) (scalar 0)
            (call $computeM1 (load.param $g))
            (scalar 0) (scalar 1) (scalar 0)
            #####
            (load.param $p)
            (load.param $r)
            (call $computeM1 (load.param $p))
            (div
                (sub (get (load.param $p) 1) (get (load.param $r) 1))
                (sub (get (load.param $p) 0) (get (load.param $r) 0))) 
            (scalar 0)))

	(export default
		(registers 15) (constraints 17) (steps 1)
		(static
            (input secret (shift -1))               # 0: Gx
            (input secret (peerof 0) (shift -1))    # 1: Gy
            (input secret (childof 0) (steps 1))    # 2: s bits
            (input secret (peerof 0) (shift -1))    # 3: Px
            (input secret (peerof 0) (shift -1))    # 4: Py
            (input secret (childof 0) (steps 1))    # 5: h bits
            (input secret (peerof 0) (shift -1))    # 6: Rx
            (input secret (peerof 0) (shift -1))    # 7: Ry
            (mask (input 0))
            (cycle (power 2 256)))
        (init
			(call $initTrace 
                (slice (load.static 0) 0 1)         # G
                (slice (load.static 0) 3 4)         # P
                (slice (load.static 0) 6 7)))       # R

        (transition
            (local $p1 vector 2) (local $q1 vector 2) (local $mp1 scalar) (local $mq1 scalar) (local $is_q1_null scalar)
            (local $p2 vector 2) (local $q2 vector 2) (local $mp2 scalar) (local $mq2 scalar)

            (store.local $p1
                (call $addPoints
                    (slice (load.trace 0) 0 1)
                    (slice (load.trace 0) 0 1)
                    (get (load.trace 0) 4)))
            (store.local $p2
                (call $addPoints
                    (slice (load.trace 0) 8 9)
                    (slice (load.trace 0) 8 9)
                    (get (load.trace 0) 12)))

            (store.local $q1
                (call $computeQ
                    (slice (load.trace 0) 0 1)
                    (slice (load.trace 0) 2 3)
                    (get (load.trace 0) 5)
                    (vector (get (load.static 0) 2) (get (load.trace 0) 6))))
            (store.local $q2
                (call $computeQ
                    (slice (load.trace 0) 8 9)
                    (slice (load.trace 0) 10 11)
                    (get (load.trace 0) 13)
                    (vector (get (load.static 0) 5) (scalar 0))))

            (store.local $is_q1_null
                (mul
                    (sub (scalar 1) (get (load.static 0) 2))
                    (get (load.trace 0) 6)))

            (store.local $mp1
                (call $computeM1 (load.local $p1)))
            (store.local $mp2
                (call $computeM1 (load.local $p2)))

            (store.local $mq1
                (mul
                    (div
                        (sub (get (load.local $p1) 1) (get (load.local $q1) 1))
                        (sub (get (load.local $p1) 0) (get (load.local $q1) 0)))
                    (sub (scalar 1) (load.local $is_q1_null))))
            (store.local $mq2
                (div
                    (sub (get (load.local $p2) 1) (get (load.local $q2) 1))
                    (sub (get (load.local $p2) 0) (get (load.local $q2) 0))))

            (add
                (mul
                    (call $initTrace 
                        (slice (load.static 0) 0 1)     # G
                        (slice (load.static 0) 3 4)     # P
                        (slice (load.static 0) 6 7))    # R
                    (get (load.static 0) 8))
                (mul
					(vector
                        (load.local $p1) (load.local $q1) (load.local $mp1) (load.local $mq1) (load.local $is_q1_null)
                        (add
                            (get (load.trace 0) 7)
                            (mul (get (load.static 0) 2) (get (load.static 0) 9)))
                        (load.local $p2) (load.local $q2) (load.local $mp2) (load.local $mq2)
                        (add
                            (get (load.trace 0) 14)
                            (mul (get (load.static 0) 5) (get (load.static 0) 9))))
					(sub (scalar 1) (get (load.static 0) 8)))))

        (evaluation
            (local $p1 vector 2) (local $q1 vector 2) (local $mp1_check scalar) (local $mq1_check scalar) (local $is_q1_null scalar)
            (local $p2 vector 2) (local $q2 vector 2) (local $mp2_check scalar) (local $mq2_check scalar)

            (store.local $p1
                (call $addPoints
                    (slice (load.trace 0) 0 1)
                    (slice (load.trace 0) 0 1)
                    (get (load.trace 0) 4)))
            (store.local $p2
                (call $addPoints
                    (slice (load.trace 0) 8 9)
                    (slice (load.trace 0) 8 9)
                    (get (load.trace 0) 12)))

            (store.local $q1
                (call $computeQ
                    (slice (load.trace 0) 0 1)
                    (slice (load.trace 0) 2 3)
                    (get (load.trace 0) 5)
                    (vector (get (load.static 0) 2) (get (load.trace 0) 6))))
            (store.local $q2
                (call $computeQ
                    (slice (load.trace 0) 8 9)
                    (slice (load.trace 0) 10 11)
                    (get (load.trace 0) 13)
                    (vector (get (load.static 0) 5) (scalar 0))))

            (store.local $is_q1_null
                (mul
                    (sub (scalar 1) (get (load.static 0) 2))
                    (get (load.trace 0) 6)))

            (store.local $mp1_check
                (sub    # (3 * p1x^2 + a) - 2 * p1y * mp1
                    (add
                        (mul
                            (scalar 3)
                            (exp (get (load.trace 0) 0) (scalar 2)))
                        (load.const $a))
                    (mul
                        (mul (scalar 2) (get (load.trace 0) 1))
                        (get (load.trace 0) 4))))

            (store.local $mp2_check
                (sub    # (3 * p2x^2 + a) - 2 * p2y * mp2
                    (add
                        (mul
                            (scalar 3)
                            (exp (get (load.trace 0) 8) (scalar 2)))
                        (load.const $a))
                    (mul
                        (mul (scalar 2) (get (load.trace 0) 9))
                        (get (load.trace 0) 12))))

            (store.local $mq1_check
                (mul 
                    (sub    # (p1y - q1y) - (p1x - q1x) * mq1
                        (sub (get (load.trace 0) 1) (get (load.trace 0) 3))
                        (mul
                            (sub (get (load.trace 0) 0) (get (load.trace 0) 2))
                            (get (load.trace 0) 5)))
                    (sub (scalar 1) (get (load.trace 0) 6))))

            (store.local $mq2_check
                (sub    # (p2y - q2y) - (p2x - q2x) * mq2
                    (sub (get (load.trace 0) 9) (get (load.trace 0) 11))
                    (mul
                        (sub (get (load.trace 0) 8) (get (load.trace 0) 10))
                        (get (load.trace 0) 13))))

            (sub
                (vector 
                    (slice (load.trace 1) 0 3) (scalar 0) (scalar 0) (slice (load.trace 1) 6 7)
                    (slice (load.trace 1) 8 11) (scalar 0) (scalar 0) (get (load.trace 1) 14)
                    (sub (exp (get (load.static 0) 2) (scalar 2)) (get (load.static 0) 2))   # s bits are binary
                    (sub (exp (get (load.static 0) 5) (scalar 2)) (get (load.static 0) 5)))  # h bits are binary
                (add
                    (mul    # new inputs
                        (vector
                            (slice (load.static 0) 0 1) (scalar 0) (scalar 0) (load.local $mp1_check) (load.local $mq1_check) (scalar 1) (scalar 0)
                            (slice (load.static 0) 3 4) (slice (load.static 0) 6 7) (load.local $mp2_check) (load.local $mq2_check) (scalar 0)
                            (scalar 0) (scalar 0))
                        (get (load.static 0) 8))
                    (mul    # regular transition
                        (vector
                            (load.local $p1) (load.local $q1) (load.local $mp1_check) (load.local $mq1_check) (load.local $is_q1_null)
                            (add
                                (get (load.trace 0) 7)
                                (mul (get (load.static 0) 2) (get (load.static 0) 9)))
                            (load.local $p2) (load.local $q2) (load.local $mp2_check) (load.local $mq2_check)
                            (add
                                (get (load.trace 0) 14)
                                (mul (get (load.static 0) 5) (get (load.static 0) 9)))
                            (scalar 0) (scalar 0))
                        (sub (scalar 1) (get (load.static 0) 8))
                    )
                )
            )
        )   
    )
)